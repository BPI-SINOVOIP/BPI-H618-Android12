
#pragma once

namespace aw {
namespace hardware {
namespace keymaster {
typedef enum {
	MSG_KEYMASTER_V2_INITIALIZE = 0x201,
	MSG_KEYMASTER_V2_TERMINATE,
	MSG_KEYMASTER_V2_CONFIGURE = 0x210,
    MSG_KEYMASTER_ADD_RNG_ENTROPY = 0x212,
    MSG_KEYMASTER_GENERATE_KEY = 0x214,
    MSG_KEYMASTER_GET_KEY_CHARACTERISTICS = 0x216,
    MSG_KEYMASTER_EXPORT_KEY = 0x21D,
    MSG_KEYMASTER_ATTEST_KEY = 0x21E,
    MSG_KEYMASTER_UPGRADE_KEY= 0x220,
    MSG_KEYMASTER_DELETE_KEY = 0x222,
    MSG_KEYMASTER_DELETE_ALL_KEYS = 0x224,
    MSG_KEYMASTER_BEGIN   = 0x226,
    MSG_KEYMASTER_UPDATE = 0x228,
    MSG_KEYMASTER_FINISH = 0x22a,
    MSG_KEYMASTER_ABORT = 0x22c,
    MSG_KEYMASTER_IMPORT_KEY = 0x230,
    MSG_KEYMASTER_DESTROY_ATTESTATION_IDS =0x231,
    MSG_KEYMASTER_IMPORT_WRAPPED_KEY = 0x232,
    MSG_KEYMASTER_GET_HARDWARE_INFO = 0x233,
    MSG_KEYMASTER_GET_HMAC_SHARING_PARAMETERS = 0x234,
    MSG_KEYMASTER_COMPUTE_SHARED_HMAC = 0x235,
    MSG_KEYMASTER_VERIFY_AUTHORIZATION = 0x236,
    MSG_KEYMASTER_EARLY_BOOT_ENDED = 0x237,
    MSG_KEYMASTER_DEVICE_LOCKED = 0x238,
    //since keymint v1
    MSG_KEYMASTER_GENERATE_TIMESTAMP_TOKEN = 0x240,
    MSG_KEYMASTER_GENERATE_RKP_KEY = 0x241,
    MSG_KEYMASTER_GENERATE_CSR = 0x242,
    MSG_KEYMASTER_MAX
}AW_KM_TA_COMMANDS;
}
}
}

using ::aw::hardware::keymaster::AW_KM_TA_COMMANDS;
